
ðŸ”¹ What is Recursion?

Recursion is when a function calls itself to solve a smaller version of the same problem.
Itâ€™s like a mirror reflecting another mirrorâ€”repeating until it reaches a base case (a stopping condition).

ðŸ”¹ Key Parts of Recursion

âš¡ Base Case â†’ the condition where recursion stops (prevents infinite loop).

âš¡ Recursive Case â†’ the part where the function calls itself with a smaller problem.

Example 1: Factorial Function (factorial)

Mathematically:  n! = n Ã— (nâˆ’1) Ã— (nâˆ’2) Ã—...Ã— 1  And 0!=1


Example 2: Fibonacci Sequence

The Fibonacci series: 0, 1, 1, 2, 3, 5, 8, ...
Rule: F(n) = F(nâˆ’1) + F(nâˆ’2)
with base cases: F(0) = 0, F(1) = 1

ðŸ”¹ Things to Remember:

- Base case is crucial (otherwise infinite recursion â†’ RecursionError).

- Recursive functions can be less efficient if they recompute values (like naive Fibonacci).

- Python has a recursion limit (default ~1000 calls deep).
